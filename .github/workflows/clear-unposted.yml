name: Clear Unposted Messages

on:
  # Manual trigger only - this is a destructive operation
  workflow_dispatch:
    inputs:
      clear_all:
        description: 'Clear ALL messages including posted ones (dangerous!)'
        required: false
        type: boolean
        default: false
      confirm:
        description: 'Type "CONFIRM" to proceed'
        required: true
        type: string

jobs:
  clear-database:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    
    steps:
    - name: Validate confirmation
      run: |
        if [ "${{ github.event.inputs.confirm }}" != "CONFIRM" ]; then
          echo "‚ùå Confirmation not provided. Operation cancelled."
          echo "Please type CONFIRM in the confirm field to proceed."
          exit 1
        fi
        echo "‚úì Confirmation received"
    
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create data directory
      run: mkdir -p data
    
    - name: Find latest database from any workflow
      id: get_latest_db
      uses: actions/github-script@v7
      with:
        script: |
          // Get runs from all three workflows
          const workflows = ['fetch-posts.yml', 'daily-post.yml', 'clear-unposted.yml'];
          const allRuns = [];
          
          for (const workflow of workflows) {
            try {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow,
                branch: 'main',
                per_page: 10,
                status: 'success'
              });
              if (runs.data.workflow_runs) {
                allRuns.push(...runs.data.workflow_runs.map(run => ({
                  ...run,
                  workflow_name: workflow
                })));
              }
            } catch (error) {
              console.log(`Error fetching runs for ${workflow}:`, error.message);
            }
          }
          
          // Sort by creation time (newest first)
          allRuns.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
          
          const latestRun = allRuns[0];
          if (latestRun) {
            console.log(`Latest database source: ${latestRun.workflow_name} (run ${latestRun.id})`);
            core.setOutput('run_id', String(latestRun.id));
            core.setOutput('workflow_name', latestRun.workflow_name);
            core.setOutput('created_at', latestRun.created_at);
          } else {
            console.log('No successful workflow runs found');
            core.setOutput('run_id', '');
          }

    - name: Download latest database
      if: steps.get_latest_db.outputs.run_id != ''
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "Downloading latest database from ${{ steps.get_latest_db.outputs.workflow_name }} run ${{ steps.get_latest_db.outputs.run_id }}"
        echo "Created at: ${{ steps.get_latest_db.outputs.created_at }}"
        gh run download ${{ steps.get_latest_db.outputs.run_id }} --name posts-database --dir data/ || echo "posts-database not found"
      continue-on-error: true
    
    - name: Show database status before clearing
      env:
        BLOG_RSS_FEED_URL: ${{ secrets.BLOG_RSS_FEED_URL }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        DATABASE_PATH: ./data/posts.db
      run: |
        echo "=== Database Status BEFORE Clearing ==="
        python main.py --status
    
    - name: Clear unposted messages
      if: ${{ github.event.inputs.clear_all != 'true' }}
      env:
        DATABASE_PATH: ./data/posts.db
      run: |
        echo "üóëÔ∏è  Clearing UNPOSTED messages only..."
        python clear_unposted.py
    
    - name: Clear ALL messages (including posted)
      if: ${{ github.event.inputs.clear_all == 'true' }}
      env:
        DATABASE_PATH: ./data/posts.db
      run: |
        echo "‚ö†Ô∏è  WARNING: Clearing ALL messages including posted ones!"
        python clear_unposted.py --all << EOF
        yes
        EOF
    
    - name: Show database status after clearing
      env:
        BLOG_RSS_FEED_URL: ${{ secrets.BLOG_RSS_FEED_URL }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        DATABASE_PATH: ./data/posts.db
      run: |
        echo ""
        echo "=== Database Status AFTER Clearing ==="
        python main.py --status
    
    - name: Upload updated database as artifact
      uses: actions/upload-artifact@v4
      with:
        name: posts-database
        path: data/posts.db
        retention-days: 90
    
    - name: Summary
      run: |
        echo ""
        echo "‚úì Clear operation complete!"
        echo ""
        if [ "${{ github.event.inputs.clear_all }}" == "true" ]; then
          echo "  Mode: Cleared ALL messages (including posted)"
        else
          echo "  Mode: Cleared UNPOSTED messages only"
        fi
        echo ""
        echo "Next steps:"
        echo "  1. Run 'Fetch New Blog Posts' workflow to reload content"
        echo "  2. Messages will be scheduled automatically"
        echo ""

