name: Fetch New Blog Posts

on:
  schedule:
    # Run daily at 11:30 AM UK time
    # GMT period (Oct-Dec): 11:30 AM UTC = 11:30 AM UK time
    - cron: '30 11 * 10-12 *'
    # GMT period (Jan-Mar): 11:30 AM UTC = 11:30 AM UK time
    - cron: '30 11 * 1-3 *'
    # BST period (Apr-Sep): 10:30 AM UTC = 11:30 AM UK time  
    - cron: '30 10 * 4-9 *'
  
  # Allow manual trigger
  workflow_dispatch:

jobs:
  fetch-posts:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create data directory
      run: mkdir -p data

    - name: Find latest database from any workflow
      id: get_latest_db
      uses: actions/github-script@v7
      with:
        script: |
          // Get runs from all three workflows
          const workflows = ['fetch-posts.yml', 'daily-post.yml', 'clear-unposted.yml'];
          const allRuns = [];
          
          for (const workflow of workflows) {
            try {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow,
                branch: 'main',
                per_page: 10,
                status: 'success'
              });
              if (runs.data.workflow_runs) {
                allRuns.push(...runs.data.workflow_runs.map(run => ({
                  ...run,
                  workflow_name: workflow
                })));
              }
            } catch (error) {
              console.log(`Error fetching runs for ${workflow}:`, error.message);
            }
          }
          
          // Sort by creation time (newest first)
          allRuns.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
          
          const latestRun = allRuns[0];
          if (latestRun) {
            console.log(`Latest database source: ${latestRun.workflow_name} (run ${latestRun.id})`);
            core.setOutput('run_id', String(latestRun.id));
            core.setOutput('workflow_name', latestRun.workflow_name);
            core.setOutput('created_at', latestRun.created_at);
          } else {
            console.log('No successful workflow runs found');
            core.setOutput('run_id', '');
          }

    - name: Download latest database (if any)
      if: steps.get_latest_db.outputs.run_id != ''
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "Downloading latest database from ${{ steps.get_latest_db.outputs.workflow_name }} run ${{ steps.get_latest_db.outputs.run_id }}"
        echo "Created at: ${{ steps.get_latest_db.outputs.created_at }}"
        gh run download ${{ steps.get_latest_db.outputs.run_id }} --name posts-database --dir data/ || echo "No existing database found"
      continue-on-error: true

    - name: Prepare artifact directory
      run: |
        mkdir -p artifacts/images
    
    - name: Fetch and process new posts
      env:
        BLOG_RSS_FEED_URL: ${{ secrets.BLOG_RSS_FEED_URL }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        XAI_API_KEY: ${{ secrets.XAI_API_KEY }}
        GENERATE_IMAGES: ${{ secrets.GENERATE_IMAGES || '1.0' }}
        MINIMUM_POST_DATE: ${{ secrets.MINIMUM_POST_DATE || '2025-09-24' }}
        MAX_SCHEDULE_DAYS_AHEAD: ${{ secrets.MAX_SCHEDULE_DAYS_AHEAD || '7' }}
        DATABASE_PATH: ./data/posts.db
        POSTS_PER_BLOG: ${{ secrets.POSTS_PER_BLOG || 5 }}
        MAX_BLOG_POSTS_PER_RUN: ${{ secrets.MAX_BLOG_POSTS_PER_RUN || 0 }}
        IMAGE_OUTPUT_DIR: ./artifacts/images
        PYTHONUNBUFFERED: 1
      run: |
        python -u main.py --fetch-posts
    
    - name: Upload generated images artifact
      if: ${{ hashFiles('artifacts/images/**') != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: images
        path: artifacts/images
        if-no-files-found: ignore
    
    - name: Upload database as artifact
      uses: actions/upload-artifact@v4
      with:
        name: posts-database
        path: data/posts.db
        retention-days: 90
    
    - name: Show status
      env:
        BLOG_RSS_FEED_URL: ${{ secrets.BLOG_RSS_FEED_URL }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        MINIMUM_POST_DATE: ${{ secrets.MINIMUM_POST_DATE || '2025-09-24' }}
        DATABASE_PATH: ./data/posts.db
      run: |
        python main.py --status