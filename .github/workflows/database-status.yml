# yamllint disable-line rule:truthy
name: Database Status Check

on:
  # Allow manual trigger
  workflow_dispatch:
  
  # Allow triggering from other workflows
  repository_dispatch:
    types: [database-status]

jobs:
  database-status:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create data directory
      run: mkdir -p data

    - name: Remove any stale local database
      run: |
        rm -f data/posts.db || true

    - name: Find latest database from any workflow
      id: get_latest_db
      uses: actions/github-script@v7
      with:
        script: |
          // Get runs from all three workflows
          const workflows = ['fetch-posts.yml', 'daily-post.yml', 'clear-unposted.yml'];
          const allRuns = [];
          
          for (const workflow of workflows) {
            try {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow,
                branch: 'main',
                per_page: 10,
                status: 'success'
              });
              if (runs.data.workflow_runs) {
                allRuns.push(...runs.data.workflow_runs.map(run => ({
                  ...run,
                  workflow_name: workflow
                })));
              }
            } catch (error) {
              console.log(`Error fetching runs for ${workflow}:`, error.message);
            }
          }
          
          // Sort by creation time (newest first)
          allRuns.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
          
          const latestRun = allRuns[0];
          if (latestRun) {
            console.log(`Latest database source: ${latestRun.workflow_name} (run ${latestRun.id})`);
            core.setOutput('run_id', String(latestRun.id));
            core.setOutput('workflow_name', latestRun.workflow_name);
            core.setOutput('created_at', latestRun.created_at);
          } else {
            console.log('No successful workflow runs found');
            core.setOutput('run_id', '');
          }

    - name: Download latest database
      if: steps.get_latest_db.outputs.run_id != ''
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "Downloading database from ${{ steps.get_latest_db.outputs.workflow_name }} run ${{ steps.get_latest_db.outputs.run_id }}"
        echo "Created at: ${{ steps.get_latest_db.outputs.created_at }}"
        gh run download ${{ steps.get_latest_db.outputs.run_id }} --name posts-database --dir data/ || echo "posts-database not found"
      continue-on-error: true

    - name: Find latest images from any workflow
      id: get_latest_images
      uses: actions/github-script@v7
      with:
        script: |
          // Get runs from all three workflows
          const workflows = ['fetch-posts.yml', 'daily-post.yml', 'clear-unposted.yml'];
          const allRuns = [];
          
          for (const workflow of workflows) {
            try {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow,
                branch: 'main',
                per_page: 10,
                status: 'success'
              });
              if (runs.data.workflow_runs) {
                allRuns.push(...runs.data.workflow_runs.map(run => ({
                  ...run,
                  workflow_name: workflow
                })));
              }
            } catch (error) {
              console.log(`Error fetching runs for ${workflow}:`, error.message);
            }
          }
          
          // Sort by creation time (newest first)
          allRuns.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
          
          const latestRun = allRuns[0];
          if (latestRun) {
            console.log(`Latest images source: ${latestRun.workflow_name} (run ${latestRun.id})`);
            core.setOutput('run_id', String(latestRun.id));
            core.setOutput('workflow_name', latestRun.workflow_name);
            core.setOutput('created_at', latestRun.created_at);
          } else {
            console.log('No successful workflow runs found');
            core.setOutput('run_id', '');
          }

    - name: Download latest images artifact
      if: steps.get_latest_images.outputs.run_id != ''
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "Downloading images from ${{ steps.get_latest_images.outputs.workflow_name }} run ${{ steps.get_latest_images.outputs.run_id }}"
        echo "Created at: ${{ steps.get_latest_images.outputs.created_at }}"
        gh run download ${{ steps.get_latest_images.outputs.run_id }} --name images --dir artifacts/images/ || echo "images artifact not found"
      continue-on-error: true

    - name: Show database status
      env:
        BLOG_RSS_FEED_URL: ${{ secrets.BLOG_RSS_FEED_URL }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        DATABASE_PATH: ./data/posts.db
        LINKEDIN_ACCESS_TOKEN: ${{ secrets.LINKEDIN_ACCESS_TOKEN }}
        LINKEDIN_USER_ID: ${{ secrets.LINKEDIN_USER_ID }}
        LINKEDIN_ORG_ID: ${{ secrets.LINKEDIN_ORG_ID }}
        LINKEDIN_POST_AS_ORG: ${{ secrets.LINKEDIN_POST_AS_ORG }}
        LINKEDIN_ENABLED: ${{ secrets.LINKEDIN_ENABLED }}
        X_API_KEY: ${{ secrets.X_API_KEY }}
        X_API_SECRET: ${{ secrets.X_API_SECRET }}
        X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN }}
        X_ACCESS_TOKEN_SECRET: ${{ secrets.X_ACCESS_TOKEN_SECRET }}
        X_BEARER_TOKEN: ${{ secrets.X_BEARER_TOKEN }}
      run: |
        echo "============================================================"
        echo "DATABASE STATUS REPORT"
        echo "============================================================"
        echo "Timestamp: $(date)"
        echo ""
        
        # Check if database exists
        if [ -f "./data/posts.db" ]; then
          echo "‚úÖ Database file exists: ./data/posts.db"
          echo "üìä Database size: $(du -h ./data/posts.db | cut -f1)"
          echo ""
          
          # Show database contents using Python
          python main.py --status
          echo ""
          
          # Show raw database contents
          echo "üìã Raw Database Contents:"
          echo "------------------------"
          echo "Blog Posts:"
          sqlite3 ./data/posts.db "SELECT id, title, published_date, fetched_at FROM blog_posts ORDER BY published_date DESC LIMIT 10;" || echo "No blog posts found"
          echo ""
          echo "Posted Messages:"
          sqlite3 ./data/posts.db "SELECT id, blog_post_id, message_index, posted_to_linkedin, posted_to_x, posted_at FROM posted_messages ORDER BY id DESC LIMIT 10;" || echo "No posted messages found"
          echo ""
          
          # Show unpublished messages with details
          echo "üìù UNPUBLISHED MESSAGES (Not Posted Yet):"
          echo "=========================================="
          sqlite3 ./data/posts.db "
            SELECT 
              pm.id as msg_id,
              bp.title as blog_title,
              pm.message_index + 1 as msg_num,
              datetime(pm.scheduled_for) as scheduled,
              CASE 
                WHEN pm.posted_to_linkedin = 1 AND pm.posted_to_x = 1 THEN '‚úÖ Both'
                WHEN pm.posted_to_linkedin = 1 THEN 'üîó LinkedIn Only'
                WHEN pm.posted_to_x = 1 THEN 'ùïè X Only'
                ELSE '‚è≥ Pending'
              END as status,
              pm.message_text as preview
            FROM posted_messages pm
            JOIN blog_posts bp ON pm.blog_post_id = bp.id
            WHERE pm.posted_at IS NULL OR (pm.posted_to_linkedin = 0 OR pm.posted_to_x = 0)
            ORDER BY pm.scheduled_for ASC
          " -header -column || echo "No unpublished messages found"
          echo ""
          echo "Total unpublished messages:"
          sqlite3 ./data/posts.db "
            SELECT COUNT(*) 
            FROM posted_messages 
            WHERE posted_at IS NULL OR (posted_to_linkedin = 0 OR posted_to_x = 0)
          " || echo "0"
          echo ""
          
          # Check image file validity
          echo "üñºÔ∏è  IMAGE FILE VALIDATION:"
          echo "=========================="
          sqlite3 ./data/posts.db "
            SELECT 
              pm.id as msg_id,
              bp.title as blog_title,
              pm.message_index + 1 as msg_num,
              pm.image_url,
              CASE 
                WHEN pm.image_url IS NULL THEN '‚ùå No Image'
                WHEN pm.image_url = '' THEN '‚ùå Empty Path'
                ELSE 'üìÅ ' || pm.image_url
              END as image_status
            FROM posted_messages pm
            JOIN blog_posts bp ON pm.blog_post_id = bp.id
            WHERE pm.posted_to_linkedin = 0 AND pm.posted_to_x = 0
            ORDER BY pm.scheduled_for ASC
          " -header -column || echo "No unposted messages found"
          echo ""
          
          # Check if image files actually exist
          echo "üìÇ IMAGE FILE EXISTENCE CHECK:"
          echo "=============================="
          sqlite3 ./data/posts.db "
            SELECT 
              pm.id as msg_id,
              bp.title as blog_title,
              pm.message_index + 1 as msg_num,
              pm.image_url,
              CASE 
                WHEN pm.image_url IS NULL THEN '‚ùå No Image Path'
                WHEN pm.image_url = '' THEN '‚ùå Empty Path'
                ELSE 'üîç ' || pm.image_url
              END as file_path
            FROM posted_messages pm
            JOIN blog_posts bp ON pm.blog_post_id = bp.id
            WHERE pm.posted_to_linkedin = 0 AND pm.posted_to_x = 0
            ORDER BY pm.scheduled_for ASC
          " -header -column || echo "No unposted messages found"
          echo ""
          
          # Actually check if files exist
          echo "üîç FILE EXISTENCE VERIFICATION:"
          echo "==============================="
          sqlite3 ./data/posts.db "
            SELECT 
              pm.id as msg_id,
              bp.title as blog_title,
              pm.message_index + 1 as msg_num,
              pm.image_url,
              CASE 
                WHEN pm.image_url IS NULL THEN '‚ùå No Path'
                WHEN pm.image_url = '' THEN '‚ùå Empty Path'
                ELSE 'üìÅ ' || pm.image_url
              END as file_path
            FROM posted_messages pm
            JOIN blog_posts bp ON pm.blog_post_id = bp.id
            WHERE pm.posted_to_linkedin = 0 AND pm.posted_to_x = 0
            AND pm.image_url IS NOT NULL AND pm.image_url != ''
            ORDER BY pm.scheduled_for ASC
          " | while IFS='|' read -r msg_id blog_title msg_num image_url file_path; do
            if [[ "$msg_id" != "msg_id" && "$msg_id" != "" ]]; then
              if [[ -f "$image_url" ]]; then
                echo "‚úÖ $msg_id | $blog_title | $msg_num | $image_url | FILE EXISTS"
              else
                echo "‚ùå $msg_id | $blog_title | $msg_num | $image_url | FILE MISSING"
              fi
            fi
          done
          echo ""
          
          # Count invalid images
          echo "üìä IMAGE VALIDATION SUMMARY:"
          echo "============================"
          echo "Messages with no image path:"
          sqlite3 ./data/posts.db "
            SELECT COUNT(*) 
            FROM posted_messages 
            WHERE posted_to_linkedin = 0 AND posted_to_x = 0 
            AND (image_url IS NULL OR image_url = '')
          " || echo "0"
          echo ""
          echo "Messages with image paths:"
          sqlite3 ./data/posts.db "
            SELECT COUNT(*) 
            FROM posted_messages 
            WHERE posted_to_linkedin = 0 AND posted_to_x = 0 
            AND image_url IS NOT NULL AND image_url != ''
          " || echo "0"
          echo ""
          
          # Count existing vs missing files
          echo "üìÅ FILE EXISTENCE SUMMARY:"
          echo "=========================="
          
          # Get all image paths and check existence
          echo "Checking image files..."
          existing_count=0
          missing_count=0
          
          # Use a temporary file to store results
          temp_file=$(mktemp)
          sqlite3 ./data/posts.db "
            SELECT pm.image_url
            FROM posted_messages pm
            WHERE pm.posted_to_linkedin = 0 AND pm.posted_to_x = 0
            AND pm.image_url IS NOT NULL AND pm.image_url != ''
          " > "$temp_file" 2>/dev/null || echo "No image paths found"
          
          if [[ -s "$temp_file" ]]; then
            while IFS= read -r image_url; do
              if [[ -n "$image_url" && "$image_url" != "image_url" ]]; then
                echo "Checking: $image_url"
                if [[ -f "$image_url" ]]; then
                  echo "‚úÖ File exists: $image_url"
                  ((existing_count++))
                else
                  echo "‚ùå File missing: $image_url"
                  ((missing_count++))
                fi
              fi
            done < "$temp_file"
          else
            echo "No image paths found in database"
          fi
          
          # Clean up temp file
          rm -f "$temp_file"
          
          echo "Files that exist: $existing_count"
          echo "Files that are missing: $missing_count"
          echo ""
          
          echo "Database Schema:"
          sqlite3 ./data/posts.db ".schema"
        else
          echo "‚ùå Database file does not exist"
          echo "This could mean:"
          echo "  - No workflows have run yet"
          echo "  - No artifacts have been created"
          echo "  - Database hasn't been initialized"
        fi
        
        echo ""
        echo "============================================================"
        echo "END OF DATABASE STATUS REPORT"
        echo "============================================================"
    
    - name: Upload database status as artifact
      if: always() && hashFiles('data/posts.db') != ''
      uses: actions/upload-artifact@v4
      with:
        name: database-status-report
        path: |
          data/posts.db
        retention-days: 7
